Œ¶(x)=cdf(Normal(0,1),x)

type PPProcess
	Œª::Function
	Œõ::Any
end

function PPProcess(Œõ::Any)
	Œª(x)=Œõ
	PPProcess(Œª,Œõ)
end

function PPProcess(Œõ::Any,Œ¶::Function,f::Function)
	Œª(x)=Œõ*Œ¶(f(x))
	PPProcess(Œª,Œõ)
end

function rand(Œû::PPProcess, a,b)
	n‚Çö=rand(Poisson(Œû.Œõ*(b-a)))
	T‚Çö=sort(rand(Uniform(a,b),n‚Çö))
	times=Array(Float64,0)
	for t in T‚Çö
		if(rand(Bernoulli(Œû.Œª(t)/Œû.Œõ))[1]==1.0)
			push!(times,t)
		end
	end
	return times
end

function Œû‚ÇÄ‚Çê(Œæ‚ÇÄ‚Çê,Œº‚ÇÄ,f‚ÇÄ)
	for t in keys(Œæ‚ÇÄ‚Çê)
		Œæ‚ÇÄ‚Çê[t]["yf"]=rand(Truncated(Normal(Œº‚ÇÄ+f‚ÇÄ[t][1],1),0,Inf))
	end
end

function Œû‚ÇÅ‚Çê(Œæ‚ÇÅ‚Çê,Œºf‚ÇÅ,f‚ÇÅ)
	for t in keys(Œæ‚ÇÅ‚Çê)
		Œæ‚ÇÅ‚Çê[t]["yf"]=rand(Truncated(Normal(Œºf‚ÇÅ+f‚ÇÅ[t][1],1),0,Inf))
	end
end

function Œû‚ÇÄ·µ£(Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œû‚Çö,Tobs)
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	Œæ‚ÇÄ·µ£=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÄ·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			Œæ‚ÇÄ·µ£[t]=Dict{UTF8String,Float64}("yf"=>rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),-Inf,0)))
		end
	end
	return Œæ‚ÇÄ·µ£
end

function Œû‚ÇÅ·µ£(Œºf‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,Œû‚Çö,Tobs)
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	Œæ‚ÇÅ·µ£=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÅ·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œºf‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			Œæ‚ÇÅ·µ£[t]=Dict{UTF8String,Float64}("yf"=>rand(Truncated(Normal(Œºf‚ÇÅ+f‚Çö[t][1],1),-Inf,0)))
		end
	end
	return Œæ‚ÇÅ·µ£
end


function Œû‚ÇÄ‚Çê·µ£(Œºg,g,≈Çg,œÅ¬≤g,Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œû‚Çö,Tobs)
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	g‚Çö=FFBS2(g,T‚Çö,≈Çg,œÅ¬≤g)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	Œæ‚ÇÄ‚Çê·µ£=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÄ‚Çê·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli((1-Œ¶(Œºg+g‚Çö[t][1]))*Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			Œæ‚ÇÄ‚Çê·µ£[t]=Dict{UTF8String,Float64}("yf"=>rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),0,Inf)),"yg"=>rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),-Inf,0)))
		end
	end
	return Œæ‚ÇÄ‚Çê·µ£
end

function Œû‚ÇÄ·µ£·µ£(Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œû‚Çö,Tobs)
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	Œæ‚ÇÄ·µ£·µ£=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÄ·µ£·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			Œæ‚ÇÄ·µ£·µ£[t]=Dict{UTF8String,Float64}("yf"=>rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),-Inf,0)))
		end
	end
	return Œæ‚ÇÄ·µ£·µ£
end

function Œû‚ÇÅ‚Çê·µ£(Œºg,g,≈Çg,œÅ¬≤g,Œº‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,Œû‚Çö,Tobs)
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	g‚Çö=FFBS2(g,T‚Çö,≈Çg,œÅ¬≤g)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	Œæ‚ÇÅ‚Çê·µ£=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÅ‚Çê·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(Œ¶(Œºg+g‚Çö[t][1])*Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			Œæ‚ÇÅ‚Çê·µ£[t]=Dict{UTF8String,Float64}("yf"=>rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),0,Inf)),"yg"=>rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),0,Inf)))
		end
	end
	return Œæ‚ÇÅ‚Çê·µ£
end

function Œû‚ÇÅ·µ£·µ£(Œº‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,Œû‚Çö,Tobs)
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	Œæ‚ÇÅ·µ£·µ£=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÅ·µ£·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			Œæ‚ÇÅ·µ£·µ£[t]=Dict{UTF8String,Float64}("yf"=>rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),-Inf,0)))
		end
	end
	return Œæ‚ÇÅ·µ£·µ£
end


function Œû‚ÇÄ‚Çê‚Çê‚ÇÅ‚Çê‚Çê(Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œº‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,Œºg,g,≈Çg,œÅ¬≤g,Td)
	Œæ‚ÇÄ‚Çê‚Çê=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÄ‚Çê‚Çê,length(Td))
	Œæ‚ÇÅ‚Çê‚Çê=Dict{Float64,Dict{UTF8String,Float64}}()
	sizehint!(Œæ‚ÇÅ‚Çê‚Çê,length(Td))
	g‚Çö=FFBS2(g,Td,≈Çg,œÅ¬≤g)
	f‚ÇÄ‚Çö=FFBS2(f‚ÇÄ,Td,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	f‚ÇÅ‚Çö=FFBS2(f‚ÇÅ,Td,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	for t in Td
		denominator=Œ¶(Œºg+g‚Çö[t][1])*Œ¶(Œº‚ÇÄ+f‚ÇÄ‚Çö[t][1])+(1-Œ¶(Œºg+g‚Çö[t][1]))*Œ¶(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1])
		if(rand(Bernoulli((1-Œ¶(Œºg+g‚Çö[t][1]))*Œ¶(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1])/denominator))[1]==1.0)
			Œæ‚ÇÅ‚Çê‚Çê[t]=Dict("yf"=>rand(Truncated(Normal(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1],1),0,Inf)), "yg"=>rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),-Inf,0)))
		else
			Œæ‚ÇÄ‚Çê‚Çê[t]=Dict("yf"=>rand(Truncated(Normal(Œº‚ÇÄ+f‚ÇÄ‚Çö[t][1],1),0,Inf)), "yg"=>rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),0,Inf)))
		end
	end
	return Œæ‚ÇÄ‚Çê‚Çê,Œæ‚ÇÅ‚Çê‚Çê
end

function Y‚ÇÄY‚ÇÅYg(Œæ‚ÇÄ‚Çê,Œæ‚ÇÄ·µ£,Œæ‚ÇÅ‚Çê,Œæ‚ÇÅ·µ£,Œæ‚ÇÄ‚Çê‚Çê,Œæ‚ÇÄ‚Çê·µ£,Œæ‚ÇÅ‚Çê‚Çê,Œæ‚ÇÅ‚Çê·µ£,Œæ‚ÇÄ·µ£·µ£,Œæ‚ÇÅ·µ£·µ£)
	y‚ÇÄ=Dict{Float64,Float64}()
	sizehint!(y‚ÇÄ,length(Œæ‚ÇÄ‚Çê)+length(Œæ‚ÇÄ·µ£)+length(Œæ‚ÇÄ‚Çê‚Çê)+length(Œæ‚ÇÄ‚Çê·µ£)+length(Œæ‚ÇÄ·µ£·µ£))
	y‚ÇÅ=Dict{Float64,Float64}()
	sizehint!(y‚ÇÅ,length(Œæ‚ÇÅ‚Çê)+length(Œæ‚ÇÅ·µ£)+length(Œæ‚ÇÅ‚Çê‚Çê)+length(Œæ‚ÇÅ‚Çê·µ£)+length(Œæ‚ÇÅ·µ£·µ£))
	yg=Dict{Float64,Float64}()
	sizehint!(yg,length(Œæ‚ÇÄ‚Çê‚Çê)+length(Œæ‚ÇÄ‚Çê·µ£)+length(Œæ‚ÇÅ‚Çê‚Çê)+length(Œæ‚ÇÅ‚Çê·µ£)+length(Œæ‚ÇÄ·µ£·µ£)+length(Œæ‚ÇÅ·µ£·µ£))
	for t in keys(Œæ‚ÇÄ‚Çê)
		y‚ÇÄ[t]=Œæ‚ÇÄ‚Çê[t]["yf"]
	end
	for t in keys(Œæ‚ÇÄ·µ£)
		y‚ÇÄ[t]=Œæ‚ÇÄ·µ£[t]["yf"]
	end
	for t in keys(Œæ‚ÇÅ‚Çê)
		y‚ÇÅ[t]=Œæ‚ÇÅ‚Çê[t]["yf"]
	end
	for t in keys(Œæ‚ÇÅ·µ£)
		y‚ÇÅ[t]=Œæ‚ÇÅ·µ£[t]["yf"]
	end
	for t in keys(Œæ‚ÇÄ‚Çê‚Çê)
		y‚ÇÄ[t]=Œæ‚ÇÄ‚Çê‚Çê[t]["yf"]
		yg[t]=Œæ‚ÇÄ‚Çê‚Çê[t]["yg"]
	end
	for t in keys(Œæ‚ÇÄ‚Çê·µ£)
		y‚ÇÄ[t]=Œæ‚ÇÄ‚Çê·µ£[t]["yf"]
		yg[t]=Œæ‚ÇÄ‚Çê·µ£[t]["yg"]
	end
	for t in keys(Œæ‚ÇÅ‚Çê‚Çê)
		y‚ÇÅ[t]=Œæ‚ÇÅ‚Çê‚Çê[t]["yf"]
		yg[t]=Œæ‚ÇÅ‚Çê‚Çê[t]["yg"]
	end
	for t in keys(Œæ‚ÇÅ‚Çê·µ£)
		y‚ÇÅ[t]=Œæ‚ÇÅ‚Çê·µ£[t]["yf"]
		yg[t]=Œæ‚ÇÅ‚Çê·µ£[t]["yg"]
	end
	for t in keys(Œæ‚ÇÄ·µ£·µ£)
		y‚ÇÄ[t]=Œæ‚ÇÄ·µ£·µ£[t]["yf"]
	end
	for t in keys(Œæ‚ÇÅ·µ£·µ£)
		y‚ÇÅ[t]=Œæ‚ÇÅ·µ£·µ£[t]["yf"]
	end
	return y‚ÇÄ,y‚ÇÅ,yg
end


function Œû!(trial::Atrial,Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œû‚Çö)
	(id,Tobs,y‚ÇÄ,Œæ‚ÇÄ‚Çê,Œæ‚ÇÄ·µ£)=params(trial)
	empty!(y‚ÇÄ)

	#Œæ‚ÇÄ‚Çê
	for t in keys(Œæ‚ÇÄ‚Çê)
		y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚ÇÄ[t][1],1),0,Inf))
		Œæ‚ÇÄ‚Çê[t]["yf"]=y‚ÇÄ[t]
	end

	#Œæ‚ÇÄ·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	empty!(Œæ‚ÇÄ·µ£)
	sizehint!(Œæ‚ÇÄ·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÄ·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÄ[t])
		end
	end

end

function Œû!(trial::Btrial,Œº‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,Œû‚Çö)
	(id,Tobs,y‚ÇÅ,Œæ‚ÇÅ‚Çê,Œæ‚ÇÅ·µ£)=params(trial)
	empty!(y‚ÇÅ)

	#Œæ‚ÇÅ‚Çê
	for t in keys(Œæ‚ÇÅ‚Çê)
		y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚ÇÅ[t][1],1),0,Inf))
		Œæ‚ÇÅ‚Çê[t]["yf"]=y‚ÇÅ[t]
	end

	#Œæ‚ÇÅ·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	empty!(Œæ‚ÇÅ·µ£)
	sizehint!(Œæ‚ÇÅ·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÅ·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÅ[t])
		end
	end
end

function Œû!(trial::ABtrial,Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œº‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,≈Çg,œÅ¬≤g,Œû‚Çö)
	(id,Tobs,Œºg,y‚ÇÄ,y‚ÇÅ,yg,Œæ‚ÇÄ‚Çê·µ£,Œæ‚ÇÄ·µ£·µ£,Œæ‚ÇÅ‚Çê·µ£,Œæ‚ÇÅ·µ£·µ£,Œæ‚ÇÄ‚Çê‚Çê,Œæ‚ÇÅ‚Çê‚Çê,ùëá,g,g·µß)=params(trial)
	empty!(y‚ÇÄ)
	empty!(y‚ÇÅ)
	empty!(yg)

	#Œæ‚ÇÄ‚Çê·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	g‚Çö=FFBS2(g,T‚Çö,≈Çg,œÅ¬≤g)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	empty!(Œæ‚ÇÄ‚Çê·µ£)
	sizehint!(Œæ‚ÇÄ‚Çê·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli((1-Œ¶(Œºg+g‚Çö[t][1]))*Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÄ‚Çê·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÄ[t],"yg"=>yg[t])
		end
	end

	#Œæ‚ÇÄ·µ£·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	empty!(Œæ‚ÇÄ·µ£·µ£)
	sizehint!(Œæ‚ÇÄ·µ£·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÄ·µ£·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÄ[t])
		end
	end

	#sample Œæ‚ÇÅ‚Çê·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	g‚Çö=FFBS2(g,T‚Çö,≈Çg,œÅ¬≤g)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	empty!(Œæ‚ÇÅ‚Çê·µ£)
	sizehint!(Œæ‚ÇÅ‚Çê·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(Œ¶(Œºg+g‚Çö[t][1])*Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),0,Inf))
			Œæ‚ÇÅ‚Çê·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÅ[t],"yg"=>yg[t])
		end
	end

	#sample Œæ‚ÇÅ·µ£·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	empty!(Œæ‚ÇÅ·µ£·µ£)
	sizehint!(Œæ‚ÇÅ·µ£·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÅ·µ£·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÅ[t])
		end
	end

	#sample Œæ‚ÇÄ‚Çê‚Çê, Œæ‚ÇÅ‚Çê‚Çê
	empty!(Œæ‚ÇÄ‚Çê‚Çê)
	sizehint!(Œæ‚ÇÄ‚Çê‚Çê,length(ùëá))
	empty!(Œæ‚ÇÅ‚Çê‚Çê)
	sizehint!(Œæ‚ÇÅ‚Çê‚Çê,length(ùëá))
	T‚Çö=setdiff(ùëá,collect(keys(f‚ÇÄ)))
	if(isempty(T‚Çö))
		f‚ÇÄ‚Çö=copy(f‚ÇÄ)
	else
		f‚ÇÄ‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
		f‚ÇÄ‚Çö=merge(f‚ÇÄ‚Çö,f‚ÇÄ)
	end
	T‚Çö=setdiff(ùëá,collect(keys(f‚ÇÅ)))
	if(isempty(T‚Çö))
		f‚ÇÅ‚Çö=copy(f‚ÇÅ)
	else
		f‚ÇÅ‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
		f‚ÇÅ‚Çö=merge(f‚ÇÅ‚Çö,f‚ÇÅ)
	end
	for t in ùëá
		denominator=Œ¶(Œºg+g[t][1])*Œ¶(Œº‚ÇÄ+f‚ÇÄ‚Çö[t][1])+(1-Œ¶(Œºg+g[t][1]))*Œ¶(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1])
		if(rand(Bernoulli((1-Œ¶(Œºg+g[t][1]))*Œ¶(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1])/denominator))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g[t][1],1),-Inf,0))
			Œæ‚ÇÅ‚Çê‚Çê[t]=Dict("yf"=>y‚ÇÅ[t], "yg"=>yg[t])
		else
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚ÇÄ‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g[t][1],1),0,Inf))
			Œæ‚ÇÄ‚Çê‚Çê[t]=Dict("yf"=>y‚ÇÄ[t], "yg"=>yg[t])
		end
	end
	trial.y‚ÇÄ=merge(
	SortedDict(Dict(zip(sort(collect(keys(Œæ‚ÇÄ‚Çê·µ£))),[Œæ‚ÇÄ‚Çê·µ£[key]["yf"] for key in sort(collect(keys(Œæ‚ÇÄ‚Çê·µ£)))]))),
	SortedDict(Dict(zip(sort(collect(keys(Œæ‚ÇÄ·µ£·µ£))),[Œæ‚ÇÄ·µ£·µ£[key]["yf"] for key in sort(collect(keys(Œæ‚ÇÄ·µ£·µ£)))]))),
	SortedDict(Dict(zip(sort(collect(keys(Œæ‚ÇÄ‚Çê‚Çê))),[Œæ‚ÇÄ‚Çê‚Çê[key]["yf"] for key in sort(collect(keys(Œæ‚ÇÄ‚Çê‚Çê)))])))
	)
	trial.y‚ÇÅ=merge(
	SortedDict(Dict(zip(sort(collect(keys(Œæ‚ÇÅ‚Çê·µ£))),[Œæ‚ÇÅ‚Çê·µ£[key]["yf"] for key in sort(collect(keys(Œæ‚ÇÅ‚Çê·µ£)))]))),
	SortedDict(Dict(zip(sort(collect(keys(Œæ‚ÇÅ·µ£·µ£))),[Œæ‚ÇÅ·µ£·µ£[key]["yf"] for key in sort(collect(keys(Œæ‚ÇÅ·µ£·µ£)))]))),
	SortedDict(Dict(zip(sort(collect(keys(Œæ‚ÇÅ‚Çê‚Çê))),[Œæ‚ÇÅ‚Çê‚Çê[key]["yf"] for key in sort(collect(keys(Œæ‚ÇÅ‚Çê‚Çê)))])))
	)
end

function ùê∫!(trial::ABtrial,œÉ¬≤,œÉ¬≤‚Çò,≈Çg,œÅ¬≤g)
	(id,Tobs,Œºg,y‚ÇÄ,y‚ÇÅ,yg,Œæ‚ÇÄ‚Çê·µ£,Œæ‚ÇÄ·µ£·µ£,Œæ‚ÇÅ‚Çê·µ£,Œæ‚ÇÅ·µ£·µ£,Œæ‚ÇÄ‚Çê‚Çê,Œæ‚ÇÅ‚Çê‚Çê,ùëá,g,g·µß)=params(trial);


	trial.Œºg=rand(mu(trial.yg,trial.g·µß,œÉ¬≤,≈Çg,œÅ¬≤g,œÉ¬≤‚Çò))
	logodds=(sslogdensity(yg,1,Œºg,œÉ¬≤,≈Çg,œÅ¬≤g)-sslogdensity(yg,0,Œºg,œÉ¬≤,≈Çg,œÅ¬≤g))
	odds=exp(logodds)
	if(odds==Inf)
		trial.g·µß=1
	elseif(odds==-Inf)
		trial.g·µß=0
	else
		trial.g·µß=rand(Bernoulli(odds/(1+odds)))
	end
	if(trial.g·µß==1)
		trial.g=FFBS(yg,Œºg,œÉ¬≤,≈Çg,œÅ¬≤g)
	else
		empty!(g)
		for key in keys(yg)
			g[key]=zeros(Float64,3)
		end
	end
end

function Œû(trial::ABtrial,Œº‚ÇÄ,f‚ÇÄ,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ,Œº‚ÇÅ,f‚ÇÅ,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ,≈Çg,œÅ¬≤g,Œû‚Çö)
	(id,Tobs,Œºg,y‚ÇÄ,y‚ÇÅ,yg,Œæ‚ÇÄ‚Çê·µ£,Œæ‚ÇÄ·µ£·µ£,Œæ‚ÇÅ‚Çê·µ£,Œæ‚ÇÅ·µ£·µ£,Œæ‚ÇÄ‚Çê‚Çê,Œæ‚ÇÅ‚Çê‚Çê,ùëá,g,g·µß)=params(trial)
	empty!(y‚ÇÄ)
	empty!(y‚ÇÅ)
	empty!(yg)

	#Œæ‚ÇÄ‚Çê·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	g‚Çö=FFBS2(g,T‚Çö,≈Çg,œÅ¬≤g)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	empty!(Œæ‚ÇÄ‚Çê·µ£)
	sizehint!(Œæ‚ÇÄ‚Çê·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli((1-Œ¶(Œºg+g‚Çö[t][1]))*Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÄ‚Çê·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÄ[t],"yg"=>yg[t])
		end
	end

	#Œæ‚ÇÄ·µ£·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÄ,T‚Çö,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)
	empty!(Œæ‚ÇÄ·µ£·µ£)
	sizehint!(Œæ‚ÇÄ·µ£·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÄ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÄ·µ£·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÄ[t])
		end
	end

	#sample Œæ‚ÇÅ‚Çê·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	g‚Çö=FFBS2(g,T‚Çö,≈Çg,œÅ¬≤g)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	empty!(Œæ‚ÇÅ‚Çê·µ£)
	sizehint!(Œæ‚ÇÅ‚Çê·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(Œ¶(Œºg+g‚Çö[t][1])*Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g‚Çö[t][1],1),0,Inf))
			Œæ‚ÇÅ‚Çê·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÅ[t],"yg"=>yg[t])
		end
	end

	#sample Œæ‚ÇÅ·µ£·µ£
	T‚Çö=rand(Œû‚Çö,0,Tobs)
	f‚Çö=FFBS2(f‚ÇÅ,T‚Çö,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)
	empty!(Œæ‚ÇÅ·µ£·µ£)
	sizehint!(Œæ‚ÇÅ·µ£·µ£,length(T‚Çö))
	for t in T‚Çö
		if(rand(Bernoulli(1-Œ¶(Œº‚ÇÅ+f‚Çö[t][1])))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚Çö[t][1],1),-Inf,0))
			Œæ‚ÇÅ·µ£·µ£[t]=Dict{UTF8String,Float64}("yf"=>y‚ÇÅ[t])
		end
	end

	#sample Œæ‚ÇÄ‚Çê‚Çê, Œæ‚ÇÅ‚Çê‚Çê
	empty!(Œæ‚ÇÄ‚Çê‚Çê)
	sizehint!(Œæ‚ÇÄ‚Çê‚Çê,length(ùëá))
	empty!(Œæ‚ÇÅ‚Çê‚Çê)
	sizehint!(Œæ‚ÇÅ‚Çê‚Çê,length(ùëá))
	#=f‚ÇÄ‚Çö=FFBS2(f‚ÇÄ,ùëá,≈Ç‚ÇÄ,œÅ¬≤‚ÇÄ)=#
	#=f‚ÇÅ‚Çö=FFBS2(f‚ÇÅ,ùëá,≈Ç‚ÇÅ,œÅ¬≤‚ÇÅ)=#
	for t in ùëá
		denominator=Œ¶(Œºg+g[t][1])*Œ¶(Œº‚ÇÄ+f‚ÇÄ‚Çö[t][1])+(1-Œ¶(Œºg+g[t][1]))*Œ¶(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1])
		if(rand(Bernoulli((1-Œ¶(Œºg+g[t][1]))*Œ¶(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1])/denominator))[1]==1.0)
			y‚ÇÅ[t]=rand(Truncated(Normal(Œº‚ÇÅ+f‚ÇÅ‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g[t][1],1),-Inf,0))
			Œæ‚ÇÅ‚Çê‚Çê[t]=Dict("yf"=>y‚ÇÅ[t], "yg"=>yg[t])
		else
			y‚ÇÄ[t]=rand(Truncated(Normal(Œº‚ÇÄ+f‚ÇÄ‚Çö[t][1],1),0,Inf))
			yg[t]=rand(Truncated(Normal(Œºg+g[t][1],1),0,Inf))
			Œæ‚ÇÄ‚Çê‚Çê[t]=Dict("yf"=>y‚ÇÄ[t], "yg"=>yg[t])
		end
	end

	return ABtrial(id,Tobs,Œºg,y‚ÇÄ,y‚ÇÅ,yg,Œæ‚ÇÄ‚Çê·µ£,Œæ‚ÇÄ·µ£·µ£,Œæ‚ÇÅ‚Çê·µ£,Œæ‚ÇÅ·µ£·µ£,Œæ‚ÇÄ‚Çê‚Çê,Œæ‚ÇÅ‚Çê‚Çê,ùëá,g,g·µß)
end
